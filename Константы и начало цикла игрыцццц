import sys
import pygame as pg #сделали псевдоним для пигейма, теперь он пг
import random as rnd

# Введем основные константы
# Константы для определения игрового состояния
GAME_INIT = 0
GAME_MENU = 1
GAME_PLAY = 2
GAME_QUIT= -1
# Константу для определения количества кадров в секунду
FSP = 60
# размер одного блока игрового поля и змейки в пикселях
BLOCK_SIZE = 24
# максимальный уровень в игре
MAX_LEVEL = 29
# константы для определения направления (direction)
D_UP = 0
D_RIGHT = 64
D_DOWN = 128
D_LEFT = 192
# константы для определения размера игрового поля в блоках
SCREEN_WIDTH = 456
SCREEN_HEIGHT = 528

# с помощью этого словаря будем управлять змейкой
# в соответствии с ее направлением
SNAKE_OFFSETS = {
    D_UP: pg.Vector2(0,-1),
    D_DOWN: pg.Vector2(0,1),
    D_RIGHT: pg.Vector2(1,0),
    D_LEFT: pg.Vector2(-1,0)
}

# инициализируем PyGame
pg.init()

# переменная для определения игрового состояния
game_state = GAME_INIT

# переменные для отображения графики
# функция создающая основной экран. На нем будет отрисовываться игра
main_screen:pg.Surface = pg.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
pg.display.set_caption('Brick Snake')
# изображение бэкграунда
img_back:pg.Surface = pg.image.load('assets/background.png')
# изображение части змейки и яблока
img_snakeblock:pg.Surface = pg.image.load('assets/full_brick.png')

# все о змее
# хвост - список векторов, т.е. просто координаты X и Y
snake = []
# скорость
snake_speed:int = 0
snake_speed_count:int = 0
# направление
snake_direction:int = 0 # 0 - вверх, 64 - вправо, 128 - вниз, 192 - влево
temporary_direction:int = 0

# все о яблоке
# координаты
appple_coord = pg.Vector2(0,0)
# надо ли рисовать яблоко
is_apple_required = True

# переменные для хранения текущих значений (очки, макс очки, уровень)
current_score:int = 0
high_score:int = 0
level:int = 1

# переменные для нового шрифта
# переменные для нового шрифта
brick_font = pg.font.Font('assets\TickingTimebombBB.ttf',48)
score_zone = brick_font.render(str(current_score).zfill(6),False,pg.Color(0,0,0,255))
hiscore_zone = brick_font.render(str(high_score).zfill(6),False,pg.Color(0,0,0,255))
level_zone = brick_font.render(str(level).zfill(2),False,pg.Color(0,0,0,255))

# переменные для времени
clock = pg.time.Clock()
clock.tick(FPS)

#переменная для хранения нажатых в процессе игры клавиш
keys = None
    

# основной игровой цикл, который будет вызывать различные действия в зависимости от состояния
while game_state != GAME_QUIT:
    # проверяем, не нажат ли крестик, и выходим, если нажат
    for event in pg.event.get():
        if event.type == pg.QUIT:
            game_state = GAME_QUIT
        # помещаем значение клавиши в keys, если произошло событие нажатия
        if event.type == pg.KEYDOWN:
            keys = event.key

    # если состояния - инициализация игры, то 
    if game_state == GAME_INIT:
        # устанавливаем начальные координаты для головы змеи и всех ее хвостов
        # ее длину и направление
        snake = [
            pg.Vector2(4,15),pg.Vector2(4,16),pg.Vector2(4,17),pg.Vector2(4,18),pg.Vector2(4,19)
        ]
        snake_direction = 0
        temporary_direction = 0
        # устанавливаем уровень в 1
        level = 1
        # сбрасываем очки (не максимальные)
        current_score = 0
        # меняем состояние на меню
        game_state = GAME_MENU

# если состояние - меню, то нам надо выбрать текущий уровень, от которого будет зависеть скорость змейки
 elif game_state == GAME_MENU:
        #print(keys)
        # увеличиваем или уменьшаем уровень в зависимости от нажатой клавиши (вниз вверх)
        # если уровень выше 10 - переключаем в 1, если 0 - переключаем в 10
        if keys == pg.K_UP:
            level +=1
            if level == MAX_LEVEL+1:
                level = 1
        elif keys == pg.K_DOWN:
            level -=1
            if level == 0:
                level = MAX_LEVEL
        # если игрок нажимает Space, то:
        elif keys == pg.K_SPACE:
            # считаем скорость змейки по формуле (30-(level%30))*50/30
            # на первом уровне движение каждые 48 кадров, на последнем - каждые два кадра
            snake_speed = int(((MAX_LEVEL+1)-(level%(MAX_LEVEL+1)))*50/(MAX_LEVEL+1))
            snake_speed_count = 0
            game_state = GAME_PLAY

elif game_state == GAME_PLAY:
        # каждый кадр надо проверять, надо ли рисовать яблоко
        # ялоко в любом случае будет появляться на нулевом кадре отсчета скорости змейки
        # поэтому не выйдет такой ситуации, что змеяка еще не передвинулась, а яблоко появилось
        # на месте, где она окажется в следующий раз
        if is_apple_required:
            # очень некрасивый способ, но вроде работает
            # создаем список всех координат поля и убираем только те, в которых есть змея
            all_coords = [pg.Vector2(x,y) for x in range(0,FIELD_W) for y in range(0,FIELD_H)]
            for snk in snake:
                if snk in all_coords: all_coords.remove(snk)
            # выбираем случайное значение из полученного списка
            rnd_apple = rnd.choice(all_coords)
            # и наконец-то создаем яблоко
            apple_coord = pg.Vector2(rnd_apple.x,rnd_apple.y)
            # и обязательно надо отключить необходимость создания нового яблока
            is_apple_required = False
            
        # тут мы управляем змейкой
        # проверяем каждый кадр, какая кнопка нажата и меняем в зависимости от этого временное направление движения
        if keys == pg.K_UP:
            temporary_direction = D_UP
        elif keys == pg.K_RIGHT:
            temporary_direction = D_RIGHT
        elif keys == pg.K_DOWN:
            temporary_direction = D_DOWN
        elif keys == pg.K_LEFT:
            temporary_direction = D_LEFT
        # если надоело - нажали на Q и игра вышла в меню
        elif keys == pg.K_q:
            game_state = GAME_INIT

        # При этом надо учитывать, что у нас есть скорость.
        # каждый кадр будет прибавляться переменная snake_speed_count
        # таким образом можно сделать задержку в несколько кадров
        if snake_speed_count == snake_speed:
            # Если текущее направление не равно временному или если временое направление не противоположное
            # тут поподробнее. Я специально выбрала для направления движения такие числа (0,64,128,192)
            # Т.к. в одном байте 8 бит или 256 возможных значений, то эти числа - каждая четверть байта
            # Если вычесть, например из 64 число 128 (0x80), а потом побитовым И обрезать последние 8 бит числа (0xff - это 255),
            # то мы получим число 192 - то есть противоположное направление
            if temporary_direction != snake_direction and (temporary_direction-0x80)&0xff != snake_direction:
                snake_direction = temporary_direction

            # Сперва надо подвинуть хвост. для этого меняем координаты всех хвостов с последнего
            # на координаты следующего хвоста
            for tail_i in range(len(snake)-1,0,-1):
                snake[tail_i].x = snake[tail_i-1].x
                snake[tail_i].y = snake[tail_i-1].y

            # в самом начале мы ввели словарь SNAKE_OFFSETS
            # он содержит единичные векторы, которые мы будем прибавлять к позиции головы змейки по ключу Направления
            snake[0].x += SNAKE_OFFSETS[snake_direction].x
            snake[0].y += SNAKE_OFFSETS[snake_direction].y

            # теперь надо проверить, не врезалась ли голова змеи в стену
            # если врезалась, то отправляем ее на другой конец поля
            if snake[0].x == -1: snake[0].x = FIELD_W-1
            if snake[0].x == FIELD_W: snake[0].x = 0
            if snake[0].y == -1: snake[0].y = FIELD_H-1
            if snake[0].y == FIELD_H: snake[0].y = 0

            # теперь надо проверить, не врезалась ли голова в хвост
            # если врезалась, то начинаем игру с меню
            for block in snake[1:]:
                if snake[0].x == block.x and snake[0].y == block.y:
                    # обновляем high score если он меньше, чем текущие очки
                    if current_score > high_score: high_score = current_score
                    game_state = GAME_INIT

            # проверяем, съела ли змея яблоко
            if snake[0].x == apple_coord.x and snake[0].y == apple_coord.y:
                # просто обновляем переменную и прибавляем очки
                is_apple_required = True
                current_score += level*30
                # и добавляем в конец змейки блок с координатами аналогичными последнему блоку
                # в следующей итерации он сам обновит координаты на правильные
                new_block = pg.Vector2(snake[len(snake)-1].x,snake[len(snake)-1].y)
                snake.append(new_block)

            snake_speed_count = 0
        else:
            snake_speed_count += 1
    

    #ОТРИСОВКА
    # рисуем фоновое изображение
    main_screen.blit(img_back,(0,0))
    # еще раз проверяем состояние, чтобы отрисовывать змейку при нужном состоянии
    if game_state == GAME_PLAY:
        for tail in snake:
            main_screen.blit(img_snakeblock,((tail.x*BLOCK_SIZE)+BLOCK_SIZE,(tail.y*BLOCK_SIZE)+BLOCK_SIZE))
        main_screen.blit(img_snakeblock,((apple_coord.x*BLOCK_SIZE)+BLOCK_SIZE,(apple_coord.y*BLOCK_SIZE)+BLOCK_SIZE))
    # обновляем все очки и текущий уровень и рисуем на экране
    score_zone = brick_font.render(str(current_score).zfill(6),False,pg.Color(0,0,0,255))
    hiscore_zone = brick_font.render(str(high_score).zfill(6),False,pg.Color(0,0,0,255))
    level_zone = brick_font.render(str(level).zfill(2),False,(0,0,0,255))
    main_screen.blit(score_zone,(288,72))
    main_screen.blit(hiscore_zone,(288,168))
    main_screen.blit(level_zone,(288,264))

    # обновляем экран
    pg.display.update()
    # очищаем keys чтобы не было умножения нажатий
    keys = None
    delta_time = clock.tick(FPS)/1000

pg.quit()
sys.exit()
